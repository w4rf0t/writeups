import Head from 'next/head'
import Image from 'next/image'
import {ApolloClient, createHttpLink, InMemoryCache, gql} from "@apollo/client"
import {setContext} from '@apollo/client/link/context'
import styles from '../css/Home.module.css'

export default function Repo({ pinnedItems }) {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.js</code>
        </p>

        <div className={styles.grid}>
          {pinnedItems.map((item) => {
            return (
              <a key={item.id} href={item.url} className={styles.card}>
                <h2>{item.name }</h2>
                <p>‚≠ê {item.stargazers.totalCount}</p>
              </a>
            )
          })}
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span>
            Hehe
          </span>
        </a>
      </footer>
    </div>
  )
}

export async function getStaticProps() {
  const httpLink = createHttpLink({
    uri: 'https://api.github.com/graphql',
  });

  const authLink = setContext((_, { headers }) => {
    return {
      headers: {
        ...headers,
        authorization: `Bearer ${process.env.GITHUB_ACCESS_TOKEN}`,
      }
    }
  })

  const client = new ApolloClient({
    link: authLink.concat(httpLink),
    cache: new InMemoryCache()
  })

  const {data} = await client.query({
    query: gql`
      {
        user(login: "w4rf0t") {
          pinnedItems(first: 6, types: [REPOSITORY]) {
            totalCount
            edges {
              node {
                ... on Repository {
                  name
                  id
                  url
                  stargazers {
                    totalCount
                  }
                }
              }
            }
          }
        }
      }
    `
  });

  const {user} = data
  const pinnedItems = user.pinnedItems.edges.map((edge) => edge.node)

  return {
    props: {
      pinnedItems
    }
  }
}